#include<stdio.h>
#include<stdlib.h>

typedef struct cvor* position;
typedef struct cvor {
	int el;

	position next;
}Cvor;

position createNode();
int randomNumber(int min, int max);
void inputIntoList(position head, int broj);
void print(position p);
void removeChosen(position head);
void removeDuplicates(position head);

int main() {
	srand(time(0));
	position head = createNode();
	int niz[20];


	for (int i = 0;i < 20;i++) {
		niz[i] = randomNumber(10, 20);
		inputIntoList(head, niz[i]);
	}



	printf("Lista: \n");
	print(head);

	removeChosen(head);
	printf("Lista bez izbora: \n");
	print(head);

	removeDuplicates(head);
	printf("Lista bez duplikata: \n");
	print(head);


	system("PAUSE");
	return 0;
}
position createNode() {
	position q = NULL;
	q = (position)malloc(sizeof(Cvor));
	if (q == NULL) {
		printf("Nije se uspilo allocirat!");
		return NULL;
	}
	q->next = NULL;
	return q;
}
int randomNumber(int min, int max) {
	return rand() % (max + 1 - min) + min;
}
void inputIntoList(position head, int broj) {
	position p = createNode();
	while (head->next != NULL) {
		head = head->next;
	}
	p->el = broj;
	p->next = NULL;
	head->next = p;
}
void print(position p)
{
	p = p->next;

	while (p != NULL)
	{
		printf("%d\n", p->el);
		p = p->next;
	}
}
void removeChosen(position head) {
	position temp = NULL;
	int unos = 0;
	printf("What number do you want to eliminate?: ");
	scanf(" %d", &unos);

	while (head != NULL && head->next != NULL) {
		if (head->next->el == unos) {
			temp = head->next;
			head->next = temp->next;
			free(temp);
		}
		else
		{
			head = head->next;
		}
	}
}

void removeDuplicates(position head) {
	position p = NULL;
	position temp = NULL;
	head = head->next;
	while (head != NULL) {
		p = head;
		while (p->next != NULL) {
			if (head->el == p->next->el) {
				temp = p->next;
				p->next = temp->next;
				free(temp);
			}
			else
				p = p->next;
		}
		head = head->next;
	}
}
